//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/InputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputController"",
    ""maps"": [
        {
            ""name"": ""InputAction"",
            ""id"": ""db28c8d1-61a5-4e15-86e0-0c7f43a876c3"",
            ""actions"": [
                {
                    ""name"": ""UpDown"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e46e912a-8e59-4602-b9c9-2075c8e420eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightLeft"",
                    ""type"": ""PassThrough"",
                    ""id"": ""95afd832-453a-401d-b847-cacd2455de02"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""PassThrough"",
                    ""id"": ""220eefa6-b697-47d7-a164-d9724cd98e16"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d24e93a1-f474-48c1-a3b9-a90cad758bdc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Up"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a35ecf61-1893-43e8-81e1-1a6005d71e48"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""PassThrough"",
                    ""id"": ""04cf3bc1-ec67-4ac0-b540-6e392d0d9734"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""114e174d-7937-4a79-b1fe-1e66781526f3"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""f3436fd3-ca59-4531-a862-f39c0bb1e102"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ac17dc6a-0e2d-4e95-958d-7643c02a1500"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""adbbec28-77e2-4ab6-b6f9-edf8bb0808a3"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightLeft"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""733a47cb-6be9-421b-bc66-71221b477a48"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""5aca728b-19d5-4dc7-aedc-82e4927f0c5e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ede59180-6b12-44f2-9ce0-0ad649fec355"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""868b2627-d67a-4c0f-adbc-eb66e9792a63"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6cf07f2c-cf09-4453-93cb-fd01d9155b8f"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e32f3ff0-9a71-4d28-b9fd-4a7ff406fc5e"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InputAction
        m_InputAction = asset.FindActionMap("InputAction", throwIfNotFound: true);
        m_InputAction_UpDown = m_InputAction.FindAction("UpDown", throwIfNotFound: true);
        m_InputAction_RightLeft = m_InputAction.FindAction("RightLeft", throwIfNotFound: true);
        m_InputAction_Attack = m_InputAction.FindAction("Attack", throwIfNotFound: true);
        m_InputAction_Dash = m_InputAction.FindAction("Dash", throwIfNotFound: true);
        m_InputAction_Up = m_InputAction.FindAction("Up", throwIfNotFound: true);
        m_InputAction_Down = m_InputAction.FindAction("Down", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InputAction
    private readonly InputActionMap m_InputAction;
    private IInputActionActions m_InputActionActionsCallbackInterface;
    private readonly InputAction m_InputAction_UpDown;
    private readonly InputAction m_InputAction_RightLeft;
    private readonly InputAction m_InputAction_Attack;
    private readonly InputAction m_InputAction_Dash;
    private readonly InputAction m_InputAction_Up;
    private readonly InputAction m_InputAction_Down;
    public struct InputActionActions
    {
        private @InputController m_Wrapper;
        public InputActionActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @UpDown => m_Wrapper.m_InputAction_UpDown;
        public InputAction @RightLeft => m_Wrapper.m_InputAction_RightLeft;
        public InputAction @Attack => m_Wrapper.m_InputAction_Attack;
        public InputAction @Dash => m_Wrapper.m_InputAction_Dash;
        public InputAction @Up => m_Wrapper.m_InputAction_Up;
        public InputAction @Down => m_Wrapper.m_InputAction_Down;
        public InputActionMap Get() { return m_Wrapper.m_InputAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputActionActions set) { return set.Get(); }
        public void SetCallbacks(IInputActionActions instance)
        {
            if (m_Wrapper.m_InputActionActionsCallbackInterface != null)
            {
                @UpDown.started -= m_Wrapper.m_InputActionActionsCallbackInterface.OnUpDown;
                @UpDown.performed -= m_Wrapper.m_InputActionActionsCallbackInterface.OnUpDown;
                @UpDown.canceled -= m_Wrapper.m_InputActionActionsCallbackInterface.OnUpDown;
                @RightLeft.started -= m_Wrapper.m_InputActionActionsCallbackInterface.OnRightLeft;
                @RightLeft.performed -= m_Wrapper.m_InputActionActionsCallbackInterface.OnRightLeft;
                @RightLeft.canceled -= m_Wrapper.m_InputActionActionsCallbackInterface.OnRightLeft;
                @Attack.started -= m_Wrapper.m_InputActionActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_InputActionActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_InputActionActionsCallbackInterface.OnAttack;
                @Dash.started -= m_Wrapper.m_InputActionActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m_InputActionActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m_InputActionActionsCallbackInterface.OnDash;
                @Up.started -= m_Wrapper.m_InputActionActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_InputActionActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_InputActionActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_InputActionActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_InputActionActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_InputActionActionsCallbackInterface.OnDown;
            }
            m_Wrapper.m_InputActionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @UpDown.started += instance.OnUpDown;
                @UpDown.performed += instance.OnUpDown;
                @UpDown.canceled += instance.OnUpDown;
                @RightLeft.started += instance.OnRightLeft;
                @RightLeft.performed += instance.OnRightLeft;
                @RightLeft.canceled += instance.OnRightLeft;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
            }
        }
    }
    public InputActionActions @InputAction => new InputActionActions(this);
    public interface IInputActionActions
    {
        void OnUpDown(InputAction.CallbackContext context);
        void OnRightLeft(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
    }
}
